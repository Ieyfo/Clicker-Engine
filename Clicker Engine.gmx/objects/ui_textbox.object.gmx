<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

event_inherited();
uiGetNumber=false;
uiTextLimit = 0;


scr_gui_setdefaults();         //you should set your default properties in this script.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

event_inherited();

with (ui_defaults) {uiMouseHandle=false};  //disable all mouse controls on other events

if uiEventObject== noone //no event object so we do standard get_string_async
{
   if uiGetNumber==false {uitextboxmsg=get_string_async(uiTextLabel,"" + string_replace_all(uiTextValue,"#","\#"));}
   else {uitextboxmsg=get_integer_async(uiTextLabel,uiTextValue);}
} else //has event object
  {
    var evNum;
    evNum=uiEventNum;
    if uiEventObject != noone
     if object_exists(uiEventObject) then
       with (uiEventObject) 
        {if evNum&gt;=0 event_user(evNum); }  

  }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (ui_defaults) {uiMouseHandle=true}; 


var i_d = ds_map_find_value(async_load, "id");


 if i_d == uitextboxmsg
    {
    if ds_map_find_value(async_load, "status")
       {
          {
          if uiGetNumber==false
            { testvalue = ds_map_find_value(async_load, "result");
              if testvalue != '' uiTextValue=testvalue;
            } else
            {
              testvalue = ds_map_find_value(async_load, "value");
              uiTextValue = string(testvalue);          
            }   
          modified = true;
          if(uiTextLimit) uiTextValue = string_copy(uiTextValue,1,uiTextLimit);
          if object_exists(uiEventObject) then      //we call the statechanged event on controller if set
             with (uiEventObject) {event_user(0);}
          }
       }
    }
uitextboxmsg= -1;    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

var ymargin,disptx,px;


event_inherited();

if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     


if(uiTextLimit) uiTextValue = string_copy(uiTextValue,1,uiTextLimit);

disptx=uiTextValue;



   if uiPasswordChar != '' then 
        {
        disptx='';
        for (fg=0;fg&lt;max(string_length(uiTextValue),10);fg+=1) {disptx += uiPasswordChar};
        }

disptx= string_replace_all(disptx,"#","\#");
        
draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);

draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY,uiBackColor,uiBackColor, false);   //fill

ymargin= (sprite_height - (string_height(disptx) * uiYscale)) div 2 ;

while (string_width(disptx+'X') * uiXscale) &gt; (sprite_width)
 { 
    disptx=string_delete(disptx,string_length(disptx),1);
    if string_length(disptx)&lt;3 break;
 }
 

if uiAlign==fa_left { px=x +5; } 
 else if uiAlign==fa_middle {px= x + (sprite_width div 2); }
   else if uiAlign==fa_right {px = x+sprite_width -5; } 
 
draw_set_color(uiTextColor);  
draw_text_transformed(px,y + ymargin,disptx,uiXscale,uiYscale,0);   

draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
