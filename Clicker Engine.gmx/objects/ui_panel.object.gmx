<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>123321</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

event_inherited();

uiBackColor = c_navy;
uiBackColor2 = c_blue;
uiDrawRectangle=false;
uiPanelSprite = -1;
uiSpriteIndex=0;
uiSpriteScale = 1.0;
uiSetModal=false;
canfocus=false;



//save states of children or when panel is the uiAnchor of object;
OldEnabled=-1;   //-1 init, 0 = false, 1 = true
OldVisible=-1;   
whatchanged=0;  //0=nothing, 1= enabled= 2 = visible

array_ids=0;       //store id's of children
array_Enabled=0;   //stores enabled of children (uiAnchor parent);
array_Visible=0;   //stores visible of children

panelfocused=false;




scr_gui_setdefaults();         //you should set your default properties in this script.















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize state checking
if OldEnabled==-1 OldEnabled=uiEnabled;
if OldVisible==-1 OldVisible=uiVisible;

if (OldEnabled != uiEnabled)
    {
       OldEnabled=uiEnabled;                           
       if uiEnabled == false
            {  whatchanged=1;  //enabled flag
               event_user(1);  //save states and visible;                                                                             
            }
       else { whatchanged=1;
              event_user(2); //restore on uiEnabled = true;
            }    
    }

    //if visible flag changed....
    
if (OldVisible != uiVisible)
    {
       OldVisible=uiVisible;                           
       if uiVisible == false
            {  whatchanged=2;  //
               event_user(1);  //save states and visible;                                                                             
            }
       else { whatchanged=2;
              event_user(2); //restore on uiVisible = true;
            }    
    }        
    
if (uiSetModal) &amp;&amp; (panelfocused==false)
     { event_user(3); //disable all controls underneath;
       panelfocused=true;
     }    
else if (uiSetModal==false) &amp;&amp; (panelfocused)
    {
      event_user(4);
      panelfocused=false;    
    }
     
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restore mouse controls underneath panel.


with ui_defaults 
  {
      if (uiAnchor != other.id) uiMouseHandle=true;  
  }
 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///will disable all mouse controls beneath panel;

with ui_defaults 
  {
      if (uiAnchor != other.id) uiMouseHandle=false;  
  }
 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///called to restore states of children

//uses variable whatchanged to determine what array to restore;

var fx,curInst;

if whatchanged==0 exit; //failsafe;


fx=0;

for (fx=0;fx&lt;array_length_1d(array_ids);fx+=1)
   {
     if instance_exists(array_ids[fx])   //see if instance id is still around
        with (array_ids[fx])  
          {
            if other.whatchanged==1 uiEnabled=other.array_Enabled[fx];
            else if other.whatchanged==2 uiVisible=other.array_Visible[fx];          
          }
   }

array_ids=0;   //clear array_ids
if whatchanged==1 array_Enabled=0;  //reset array
if whatchanged==2 array_Visible=0;  //reset array  


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///called to save states of children

//uses variable whatchanged to determine what array to save.

var fx,curid;

if whatchanged==0 exit; //failsafe;

array_ids=0;   //clear array_ids

fx=0;
with ui_defaults do  //assign array of ids
  {      
     if uiAnchor == other.id {  other.array_ids[fx]=id;
                                if other.whatchanged==1 
                                      {  other.array_Enabled[fx]=uiEnabled;
                                         uiEnabled=other.uiEnabled;
                                      }   
                                 else if other.whatchanged==2 
                                                { other.array_Visible[fx]=uiVisible;
                                                  uiVisible=other.uiVisible;
                                                }   
                                 fx +=1;
                             }      
  }
  

  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/


var ymargin,disptx,px,py;

event_inherited();
if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming    


disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


px=x;
py=y;

if uiDrawRectangle { uiRadiusX=0;uiRadiusY=0;}

if (uiDrawBackColor)  
   {
    draw_set_color(uiBackColor);  
    if uiBackColor2==0 uiBackColor2=uiBackColor;
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY, uiBackColor,uiBackColor2,uiDrawOutline);   //fill
       
    px=x+2;  //need to set drawing sprite inside the rectangle.
    py=y+2;   
   } 
   
if uiPanelSprite&gt;=0 then
   {
       if uiSpriteScale==0  {
                             draw_sprite_stretched_ext(uiPanelSprite,uiSpriteIndex,px,py,sprite_width-(px-x),sprite_height-(py-y),image_blend,uiAlpha);         
                            }  //stretch image to fit.
       else draw_sprite_stretched_ext(uiPanelSprite,uiSpriteIndex,px,py,(sprite_get_width(uiPanelSprite)*uiSpriteScale),(sprite_get_height(uiPanelSprite)*uiSpriteScale),image_blend,uiAlpha);
   }   
   
draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc      
      
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
