<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>123321</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/
var fx;

event_inherited();

uiBackColor = c_blue;
uiBackColor2 = c_navy;
uiShadowColor= c_dkgray;
uiDialogSprite = -1;
uiSpriteIndex=0;
uiSpriteScale = 1.0;
uiDialogWidth=sprite_width;
uiDialogPosY=-1;     //auto-center;
uiDialogPosX=-1;     //auto-center;
uiDialogResult=-1;   //button result -1 is none, 1=button1..4=button4

uiNumButtons=4;
uiButtonHeight=50;
uiDrawRounded=true;

uiShowDialog=false;
uiSetModal=false;
canfocus=false;
panelfocused=false;



uiTitle=instance_create(x,y,ui_label);
uiSubTitle=instance_create(x,y,ui_label);;
uiCheckBox=instance_create(x,y,ui_checkbox);;
uiButtons1=instance_create(x,y,ui_button_ani);
uiButtons2=instance_create(x,y,ui_button_ani);
uiButtons3=instance_create(x,y,ui_button_ani);
uiButtons4=instance_create(x,y,ui_button_ani);

uiEditBox1=instance_create(x,y,ui_editbox);
uiEditBox2=instance_create(x,y,ui_editbox);

uiTitle.uiAlign=fa_center;
uiTitle.uiTextColor=c_teal;
uiTitle.uiDrawShadows=3;
uiTitle.uiBackColor2=c_dkgray;
uiTitle.uiCenterWrap=false;
uiTitle.uiAnchor=self.id;
uiTitle.uiAnchorPos=false;




uiSubTitle.uiAlign=fa_center;
uiSubTitle.uiTextColor=c_white;
uiSubTitle.uiDrawShadows=3;
uiSubTitle.uiBackColor2=c_dkgray;
uiSubTitle.uiAnchor=self.id;
uiSubTitle.uiAnchorPos=false;



uiCheckBox.uiAlign=fa_right;
uiCheckBox.uiAnchor=self.id;
uiCheckBox.uiAnchorPos=false;
uiCheckBox.uiAnchorProps=false;
uiCheckBox.uiVisible=false;
uiCheckBox.uiTextColor=c_green;

uiEditBox1.uiAnchor=self.id;
uiEditBox1.uiAnchorPos=false;
uiEditBox1.uiAnchorProps=false;
uiEditBox1.uiVisible=false;
uiEditBox1.uiTextLabel='';
uiEditBox1.uiTabOrder=90001;

uiEditBox2.uiAnchor=self.id;
uiEditBox2.uiAnchorPos=false;
uiEditBox2.uiAnchorProps=false;
uiEditBox2.uiVisible=false;
uiEditBox2.uiTextLabel='';
uiEditBox2.uiPasswordChar='*';
uiEditBox2.uiTabOrder=90002;


for (fx=1;fx&lt;=uiNumButtons;fx+=1)
{
   switch (fx)
    {
      case 1: curb=uiButtons1; break;
      case 2: curb=uiButtons2; break;
      case 3: curb=uiButtons3; break;
      case 4: curb=uiButtons4; break;
    }  //switch      
  with (curb) do
  {
  uiBackColor=c_white;
  uiBackColor2=c_white;
  uiShadowColor=c_black;
  uiTextColor=c_black;
  uiVisible=false;
  uiTextValue='';
  uiSetHeight=other.uiButtonHeight;
  uiEventObject=other.id;
  uiControlName='button'+string(fx);  //set control name;
  uiAnchor=other.id;
  uiAnchorPos=false;
  uiAnchorProps=false;
  
  }
} //for loop



uiVisible=false;




scr_gui_setdefaults();         //you should set your default properties in this script.
































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (uiTitle) {instance_destroy();}
with (uiSubTitle) {instance_destroy();}
with (uiButtons1) {instance_destroy();}
with (uiButtons2) {instance_destroy();}
with (uiButtons3) {instance_destroy();}
with (uiButtons4) {instance_destroy();}
with (uiCheckBox) {instance_destroy();}
with (uiEditBox1) {instance_destroy();}
with (uiEditBox2) {instance_destroy();}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiShowDialog
   {uiShowDialog=false;
    event_user(1);
    uiVisible=true;   
    uiAlpha=0.03;
    uiFadingSpeed=0.4;
    uiFadeIn=true;
    uiSetModal=true;
   }
   
if (uiSetModal) &amp;&amp; (panelfocused==false)
     { event_user(3); //disable all controls underneath;
       panelfocused=true;
     }    
  else if (uiSetModal==false) &amp;&amp; (panelfocused)
     {
      event_user(4);
      panelfocused=false;    
     }   
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restore mouse controls underneath panel.


with ui_defaults 
  {
      if (uiAnchor != other.id) uiMouseHandle=true;  
  }
 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///will disable all mouse controls beneath panel;
var maxdepth;
maxdepth=0;
with ui_defaults 
  {
      if (uiAnchor != other.id) {uiMouseHandle=false;  
                                 if depth&lt;maxdepth maxdepth=depth;}
  }

depth=maxdepth-1; 
uiMouseHandle=true; //reset ourselves.  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create dialog and it's components

var dw,dh,cury,curx,butwidth,curb,fx;

dw=uiDialogWidth;
dh=sprite_height;

if uiDialogPosY !=-1 y=uiDialogPosY;
if uiDialogPosX !=-1 x=uiDialogPosX;


uiNumButtons=0;   //calculate Number of buttons.
for (fx=1;fx&lt;=4;fx+=1)
{

   switch (fx)
    {
      case 1: curb=uiButtons1; break;
      case 2: curb=uiButtons2; break;
      case 3: curb=uiButtons3; break;
      case 4: curb=uiButtons4; break;
    }  //switch      

  with (curb) do
  { if (uiTextValue !='') {other.uiNumButtons+=1;}
    if other.uiFadeOut==true uiEnabled=false else uiEnabled=true; }  
}

//make sure we have at least one button
if uiNumButtons==0 {
                     uiButtons1.uiTextValue='OK';
                     uiNumButtons=1;                   
                   } 
  



cury=y+10;
butwidth=(dw div uiNumButtons)-(dw div 14);  //but width less 10%
butspace=dw div 14;


with uiTitle 
  {
     x=other.x+10;
     y=cury;  
     uiSetWidth=dw;
     lasttext='' ;  //force resize
     uiAlpha=other.uiAlpha;
     uiVisible=other.uiVisible;     
  }
  
cury+=uiTitle.uiCurHeight;

  
with uiSubTitle 
  {
     x=other.x+10;
     y=cury;  
     uiSetWidth=dw-20;
     lasttext='' ;  //force resize
     uiAlpha=other.uiAlpha;
     uiVisible=other.uiVisible;     
  }
  
cury += uiSubTitle.uiCurHeight+8;  
  

uiEditBox1.uiVisible=false;  
if (uiEditBox1.uiTextLabel =='') 
     {
       uiEditBox1.uiVisible=false;          
     }
else
     {
     with (uiEditBox1) 
         {x=other.x+ ( dw div 2);  //center edit1box
          y=cury;
          uiSetWidth=(dw div 2)-50;
          uiAlpha=other.uiAlpha;
          uiVisible=other.uiVisible;   
         } 
     cury += uiEditBox1.uiCurHeight+5;      
     }   

uiEditBox2.uiVisible=false;  
if (uiEditBox2.uiTextLabel =='') 
     {
       uiEditBox2.uiVisible=false;          
     }
else
     {
     with (uiEditBox2) 
         {x=other.x+ ( dw div 2);  //center edit1box
          y=cury;
          uiSetWidth=(dw div 2)-50;
          uiAlpha=other.uiAlpha;
          uiVisible=other.uiVisible;   
         } 
     cury += uiEditBox2.uiCurHeight+5;      
     }        
       
  
uiCheckBox.uiVisible=false;  
if (uiCheckBox.uiTextValue =='') 
     {
       uiCheckBox.uiVisible=false;          
     }
else
     {
     with (uiCheckBox) 
         {x=other.x+ (( dw-(string_width(uiTextValue)+150)) div 2);  //center checkbox!
          y=cury;
          uiSetWidth=string_width(uiTextValue)+100;
          uiAlpha=other.uiAlpha;
          uiVisible=other.uiVisible;     
         } 
     cury += uiCheckBox.uiCurHeight+5;     
     }   
       
cury+=20;
curx=x+( (dw-((uiNumButtons*(butwidth))+((uiNumButtons-1)*butspace))     ) div 2);

for (fx=1;fx&lt;=uiNumButtons;fx+=1)
{

   switch (fx)
    {
      case 1: curb=uiButtons1; break;
      case 2: curb=uiButtons2; break;
      case 3: curb=uiButtons3; break;
      case 4: curb=uiButtons4; break;
    }  //switch      

  with (curb) do
  {
   if (uiTextValue =='') 
     {
       uiVisible=false;          
     }
     else
     {
       x=curx;  //center checkbox!
       y=cury;
       uiSetWidth=butwidth;
       uiAlpha=other.uiAlpha;
       uiVisible=other.uiVisible;         
     }
   }
  curx+=butwidth+butspace; 
} //for loop


uiSetHeight=(cury+uiButtonHeight+10)-y;
uiSetWidth=uiDialogWidth;
    

if uiDialogPosX=-1 {x=(room_width-uiDialogWidth) div 2;}     //auto-center;
if uiDialogPosY=-1 {y=(room_height-sprite_height) div 2;}    //auto-center;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///button pressed;

//show_message(other.uiControlName);

var fx;

uiDialogResult=-1;  //none default

switch (other.uiControlName)
 {
    case 'button1': uiDialogResult=1; break;
    case 'button2': uiDialogResult=2; break;
    case 'button3': uiDialogResult=3; break;
    case 'button4': uiDialogResult=4; break; 
 } //end switch   
 
 
uiFadeOut=true;
uiSetModal=false;
 
 
var evNum;
evNum=uiEventNum;
if uiEventObject != noone
// if object_exists(uiEventObject) then
  with (uiEventObject) 
   {if evNum&gt;=0 event_user(evNum);}
   
   
 

   
   
 
 
 



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (uiTitle) {instance_destroy();}
with (uiSubTitle) {instance_destroy();}
with (uiButtons1) {instance_destroy();}
with (uiButtons2) {instance_destroy();}
with (uiButtons3) {instance_destroy();}
with (uiButtons4) {instance_destroy();}
with (uiCheckBox) {instance_destroy();}
with (uiEditBox1) {instance_destroy();}
with (uiEditBox2) {instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/


var ymargin,disptx,px,py;

event_inherited();


if uiVisible==false
  {
    uiSubTitle.uiVisible=false;
    uiButtons1.uiVisible=false;
    uiButtons2.uiVisible=false;
    uiButtons3.uiVisible=false;
    uiButtons4.uiVisible=false;
    uiCheckBox.uiVisible=false;
    uiEditBox1.uiVisible=false;
    uiEditBox2.uiVisible=false;    
  }



if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming    


disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);

px=x;
py=y;


if uiDrawRounded=false { uiRadiusX=0;uiRadiusY=0;};



if (uiDrawBackColor) &amp;&amp; (uiCustomDrawBack==noone) 
   {
    draw_roundrect_color_ext(x+3, y+3, x+sprite_width+3, y+sprite_height+3, uiRadiusX,uiRadiusY,uiShadowColor,uiShadowColor, false);   //fill          
    draw_set_color(uiBackColor);  
    if uiBackColor2==0 uiBackColor2=uiBackColor;
    draw_roundrect_color_ext(x, y, x+sprite_width, y+sprite_height, uiRadiusX,uiRadiusY, uiBackColor,uiBackColor2,uiDrawOutline);   //fill    
    px=x+2;  //need to set drawing sprite inside the rectangle.
    py=y+2;   
   }
  else if (uiCustomDrawBack != noone)
    {
      script_execute(uiCustomDrawBack,x,y,x+sprite_width,y+sprite_height,uiBackColor,uiBackColor2);    
    }    
   
   
if uiDialogSprite&gt;=0 then
   {
       if uiSpriteScale==0  {
                             draw_sprite_stretched_ext(uiDialogSprite,uiSpriteIndex,px,py,sprite_width-(px-x),sprite_height-(py-y),image_blend,uiAlpha);         
                            }  //stretch image to fit.
       else draw_sprite_stretched_ext(uiDialogSprite,uiSpriteIndex,px,py,(sprite_get_width(uiDialogSprite)*uiSpriteScale),(sprite_get_height(uiDialogSprite)*uiSpriteScale),uiImageBlend,uiAlpha);
   }   
   
event_user(1);   

draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc   
   
   
         
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
