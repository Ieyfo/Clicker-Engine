<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

event_inherited();


uiMax=100;
uiMin=1;
uiInterval=5;
uiValue=50;     //integer

uiLineWidth=5;
uiSelectSize=15; //radius of circle

uiBorderColor=c_navy;  //outline of line

uiBackColor = c_navy;
uiBackColor2 = c_blue;

uiHiliteColor  =  c_white; //outline of selector
uiHiliteColor2 =  c_teal;  //background of selector

uiSlideSprite = -1;  //if using a sprite for slider select
uiLineSprite  = -1;  //if using a sprite for line.

uiHorizontal = true;   //set to false for vertical
uiUpdateLabel = noone;    //will set the textlabel of uiUpdateLabel to uiValue on change;



mouse_move = false;
mouse_origx = 0;
mouse_origy = 0;


select_xpos = 0;
select_ypos = sprite_height div 2;
last_per = 0;  //dont' touch
uiSelectSize = sprite_height div 2; //default size to height









scr_gui_setdefaults();         //you should set your default properties in this script.














</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);  //handle mouse movement

mouse_move=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if mouse_move then exit;  //already moving...


//did user select the selector?

mouse_move=false;

if (abs(mouse_x-select_xpos)&lt;uiSelectSize ) //&amp;&amp;
 //  (abs(mouse_y-select_ypos)&lt;uiSelectSize ) 
   {
     mouse_move=true;
     mouse_origx = mouse_x;
     mouse_origy = mouse_y;
   }  








  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_move then event_user(0);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on mouse movement

var getper;

if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if (mouse_move)
  {

   if uiValue != last_per
                     {last_per=uiValue; //click on change
                      soundindex=1; //click
                      event_user(10); //process sound event;   
                     }        

  
    if (mouse_x-x)&gt;0 
      {
        getper = (mouse_x-(x+uiSelectSize)) / (sprite_width - (uiSelectSize * 2));
        uiValue= ((uiMax-uiMin) * getper) + uiMin;   
        if uiValue&gt;uiMax uiValue=uiMax;
        if uiValue&lt;uiMin uiValue=uiMin;

        var evNum;
        evNum=uiEventNum;
        if uiEventObject != noone then
         if object_exists(uiEventObject) then
            with (uiEventObject) 
               {if evNum&gt;=0 event_user(evNum); }
                       
               
      }            
  }

  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/


var ymargin,disptx,px,slideper,upst;

event_inherited();

if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming     


disptx=uiTextValue;

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


ymargin= (sprite_height - uiLineWidth) div 2;




//calculate % of slider to draw

if (uiValue mod uiInterval) != 0  uiValue= (uiValue div uiInterval) * uiInterval;





if (uiMax-uiMin) != 0 
  { slideper= ((uiValue - uiMin) / (uiMax-uiMin));} 
else {slideper=0;}


//draw selector

select_xpos = x+ uiSelectSize + round( (sprite_width - (uiSelectSize * 2)) * slideper);  //set selector position
select_ypos = y+(sprite_height div 2);

if uiLineSprite == -1 {
    if (uiDrawBackColor) {
        if uiBackColor2==0 uiBackColor2=uiBackColor;
        draw_rectangle_color(x, y+ymargin, x+sprite_width-2, y+ymargin+uiLineWidth, uiBackColor,uiBackColor, uiBackColor2,uiBackColor2, uiDrawOutline);   //fill
    }
    
    //draw border 
    draw_set_color(uiBorderColor);  
    if uiBorderColor != 0 draw_rectangle(x, y+ymargin, x+sprite_width-2, y+ymargin+uiLineWidth,true); 
} else draw_sprite(uiLineSprite, 0, x, y+ymargin);  //draw line sprite.


if uiSlideSprite== -1 
 {
  draw_circle_color(select_xpos, select_ypos , uiSelectSize, uiHiliteColor,uiHiliteColor2,false) //draw background
  if uiBorderColor != 0 draw_circle_color(select_xpos, select_ypos , uiSelectSize, uiBorderColor,uiBorderColor,true) //draw border outline
 } else
   {draw_sprite(uiSlideSprite,0,select_xpos,select_ypos);}  //sprite origin must be center
   
    

if uiUpdateLabel != noone  //if updatelabel is set...
   {
     if instance_exists(uiUpdateLabel) then
        { upst= string(uiValue);
          with (uiUpdateLabel) { uiTextValue = upst; }     
        }  
   }      

draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc   


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
