<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ui</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ui_defaults</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

event_inherited();

uiAlignV= fa_middle;
uiButtonState = 0;  //0 = up, 1 = down
uiButtonSprite= -1;
uiSpriteIndex=0;
uiSpriteAlign=fa_center;
uiSpriteAlignV=fa_middle;
uiSpriteScale=1.0;
uiPressFlash=false;
uiPressColor=c_yellow;
uiDownColor=c_green;
uiShadowColor = c_gray;
uiFlashButton=false;
uiFlashCounter=0;
uiBackColor2 = 0;
uiAlign = fa_center;  //default text to enter
uiTextColor = c_white; //default button color
uiBackColor = c_navy;
uiBackColor2 = c_blue;
uiIsToggle = false;   
uiButtonGroup = 0;      //button group
uiButtonLocked=false;
uiEnforceFocus=true; //check if button was in focus on press
hasfocus = false;

drawpress = false;
inForm=true;


scr_gui_setdefaults();         //you should set your default properties in this script.



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i,otherbuts;

if uiIsToggle { if uiButtonState==0 uiButtonState=1; else uiButtonState=0; }

if uiButtonGroup&gt;0
    {
          for (i = 0; i &lt; instance_number(ui_button); i += 1)
             {  otherbuts=instance_find(ui_button,i); 
                if (otherbuts.uiButtonState==1 &amp;&amp; otherbuts.uiButtonGroup==uiButtonGroup)
                    otherbuts.uiButtonState=0;   //if down then make up                                
             }
          uiButtonState=1;  //make this button the down button now!                         
    }

drawpress=false;
hasfocus=false;

uiFlashButton=false;
var evNum;
evNum=uiEventNum;
if uiEventObject != noone
 if object_exists(uiEventObject) then
  with (uiEventObject) 
   {if evNum&gt;=0 event_user(evNum);}
   
soundindex=1; //click
event_user(10); //process sound event;  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if uiButtonLocked exit;
drawpress=false;
hasfocus=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if (uiEnforceFocus) &amp;&amp;  (hasfocus==false) {drawpress=false; exit;}
if uiButtonLocked exit;
if uiPressFlash {
                  uiFlashButton=true;
                  alarm[0]=room_speed div 3;                 
                } else alarm[0]=1;   //call alarm to call object event.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

event_inherited();



if uiButtonLocked exit;

drawpress=true;
hasfocus=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (uiMouseHandle==false) || (uiEnabled==false) || (uiVisible==false) exit;

if uiButtonLocked exit;
drawpress=true;

if uiFocusID=self.id hasfocus=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Copyright (c) 2016 NailBuster Software Inc. (david@nailbuster.com). All rights reserved.



This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*/

var ymargin,disptx,px,py,bx,by,yratio,drawbutdown;

event_inherited();

if (uiZoomFactor==0.1) || (uiVisible==false) exit;  //for zooming   

disptx=uiTextValue;

     

draw_set_font(uiFont);
draw_set_halign(uiAlign);
draw_set_valign(fa_top);


if (uiDrawBackColor &amp;&amp; uiButtonState==0 &amp;&amp; uiDrawOutline==false)  //if draw background and state = up.
   {
    draw_set_color(uiShadowColor);  
    draw_roundrect_color_ext(x+3, y+3, x+sprite_width+3, y+sprite_height+3,uiRadiusX,uiRadiusY,uiShadowColor,uiShadowColor, false);   //fill
   } 
   
drawbutdown=false;
if (uiButtonState==1 || drawpress) then drawbutdown=true;


if (drawbutdown==false) {bx=0;by=0;} else {bx=3;by=3;};   
   
if (uiDrawBackColor)  
   {
    draw_set_color(uiBackColor);  
    if uiBackColor2==0 uiBackColor2=uiBackColor;
    if (drawbutdown==false)
       draw_roundrect_color_ext(x+bx, y+by, x+sprite_width+bx, y+sprite_height+by, uiRadiusX,uiRadiusY,uiBackColor,uiBackColor2,uiDrawOutline);   //fill
       else draw_roundrect_color_ext(x+bx, y+by, x+sprite_width+bx, y+sprite_height+by, uiRadiusX,uiRadiusY, uiDownColor,uiDownColor,uiDrawOutline);   //fill
   } 
   
if uiFlashButton then
   {
   uiFlashCounter +=1;
   px = room_speed/30;
  if (uiFlashCounter mod (5*px)) &lt; (3*px)
        {
           draw_set_color(uiDownColor);  
           draw_roundrect_color_ext(x+bx, y+by, x+sprite_width+bx, y+sprite_height+by, uiRadiusX,uiRadiusY, uiDownColor,uiDownColor, false);   //fill
        }             
   }   
   
   
   
if drawbutdown==false {image_blend=c_white;} else image_blend=uiBackColor;

      
if uiButtonSprite&gt;=0 then
   {
         px=x; 
         if uiSpriteAlign==fa_left { px=x +5; } 
            else if uiSpriteAlign==fa_center {px= x + ((sprite_width - (sprite_get_width(uiButtonSprite)*uiSpriteScale)) div 2); }
            else if uiSpriteAlign==fa_right {px = x+sprite_width - (sprite_get_width(uiButtonSprite)*uiSpriteScale) -5; } 

         py=y;      
         if uiSpriteAlignV==fa_top { py= y+5; }
            else if uiSpriteAlignV==fa_middle { py=y + ((sprite_height - (sprite_get_height(uiButtonSprite)*uiSpriteScale)) div 2);}  //center text vertically;
            else if uiSpriteAlignV==fa_bottom { py=y+sprite_height - (sprite_get_height(uiButtonSprite)*uiSpriteScale) - 5; }

         if uiSpriteScale==0  {px=x+2;py=y+2;  
                             draw_sprite_stretched_ext(uiButtonSprite,uiSpriteIndex,px+bx,py+by,sprite_width-2,sprite_height-2,image_blend,uiAlpha);         
                            }  //stretch image to fit.
         else draw_sprite_stretched_ext(uiButtonSprite,uiSpriteIndex,px+bx,py+by,(sprite_get_width(uiButtonSprite)*uiSpriteScale),(sprite_get_height(uiButtonSprite)*uiSpriteScale),image_blend,uiAlpha);
   }   
   


while (string_width(disptx+'X') * uiXscale) &gt; (sprite_width)
 { 
    disptx=string_delete(disptx,string_length(disptx),1);
    if string_length(disptx)&lt;2 break;  //failsafe
 }
 
px=x; 
if uiAlign==fa_left { px=x +5; } 
 else if uiAlign==fa_center {px= x + (sprite_width div 2); }
   else if uiAlign==fa_right {px = x+sprite_width -5; } 

py=y;      
if uiAlignV==fa_top { py= y+5; }
 else if uiAlignV==fa_middle { py=y+(sprite_height - (string_height(disptx) * uiYscale)) div 2 ;}  //center text vertically;
    else if uiAlignV==fa_bottom { py=y+sprite_height - (string_height(disptx) * uiYscale)};
   
    
draw_set_color(uiTextColor);  
if disptx != '' draw_text_transformed(px+bx,py+by,disptx,uiXscale,uiYscale,0);   

draw_set_alpha(backalpha);  //restore alpha (in case of fadeout, etc   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
